# Reset Environment Variables Script\n#Requires -Version 5.0\n#Requires -RunAsAdministrator\n\nparam([switch]$Silent, [switch]$CreateBackup = $true, [switch]$Force)\n\n$scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Definition\nImport-Module (Join-Path $scriptPath \"ReSetUtils.psm1\") -Force\n\n$operationName = \"Environment Variables Reset\"\n\ntry {\n    Assert-AdminRights\n    $operation = Start-ReSetOperation -OperationName $operationName\n    \n    # Reset system environment variables\n    Write-ProgressStep -StepName \"Resetting system variables\" -CurrentStep 1 -TotalSteps 4\n    [Environment]::SetEnvironmentVariable(\"TEMP\", \"$env:SystemRoot\\TEMP\", \"Machine\")\n    [Environment]::SetEnvironmentVariable(\"TMP\", \"$env:SystemRoot\\TEMP\", \"Machine\")\n    [Environment]::SetEnvironmentVariable(\"PATHEXT\", \".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\", \"Machine\")\n    \n    # Reset user environment variables\n    Write-ProgressStep -StepName \"Resetting user variables\" -CurrentStep 2 -TotalSteps 4\n    [Environment]::SetEnvironmentVariable(\"TEMP\", \"$env:USERPROFILE\\AppData\\Local\\Temp\", \"User\")\n    [Environment]::SetEnvironmentVariable(\"TMP\", \"$env:USERPROFILE\\AppData\\Local\\Temp\", \"User\")\n    \n    # Clean PATH variable\n    Write-ProgressStep -StepName \"Cleaning PATH variable\" -CurrentStep 3 -TotalSteps 4\n    $systemPath = [Environment]::GetEnvironmentVariable(\"PATH\", \"Machine\")\n    $cleanPath = ($systemPath -split \";\" | Where-Object {$_ -and (Test-Path $_)} | Sort-Object -Unique) -join \";\"\n    [Environment]::SetEnvironmentVariable(\"PATH\", $cleanPath, \"Machine\")\n    \n    # Remove custom variables\n    Write-ProgressStep -StepName \"Removing custom variables\" -CurrentStep 4 -TotalSteps 4\n    $defaultVars = @(\"PATH\", \"PATHEXT\", \"TEMP\", \"TMP\", \"OS\", \"PROCESSOR_ARCHITECTURE\", \"PROCESSOR_IDENTIFIER\", \"NUMBER_OF_PROCESSORS\")\n    $envPath = \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\"\n    $items = Get-ItemProperty -Path $envPath -ErrorAction SilentlyContinue\n    if ($items) {\n        $items.PSObject.Properties | Where-Object { $_.Name -notmatch \"PS\" -and $_.Name -notin $defaultVars } | ForEach-Object {\n            Remove-RegistryValue -Path $envPath -Name $_.Name\n        }\n    }\n    \n    Write-ReSetLog \"Environment variables reset completed successfully\" \"SUCCESS\"\n    Complete-ReSetOperation -OperationInfo $operation -Success $true\n}\ncatch {\n    Complete-ReSetOperation -OperationInfo $operation -Success $false -ErrorMessage $_.Exception.Message\n    throw\n}"